import UIKit
import GoogleSignIn
import Foundation

@objc(GoogleSignInCredentialManager) class GoogleSignInCredentialManager: CDVPlugin {

    var signInInstance: GIDSignIn?
    var gidClientId: String?

    override func pluginInitialize() {
        super.pluginInitialize()
        signInInstance = GIDSignIn.sharedInstance
    }

    @objc(isAvailable:)
    func isAvailable(command: CDVInvokedUrlCommand) {
        let pluginResult = CDVPluginResult(
            status: CDVCommandStatus_OK,
            messageAs: true
        )
        self.commandDelegate.send(pluginResult, callbackId: command.callbackId)
    }

    @objc(trySilentLogin:)
    func trySilentLogin(command: CDVInvokedUrlCommand) {
        signInInstance?.restorePreviousSignIn { user, error in
            if error != nil {
                self.login(command: command)
                return
            }

            guard let loggedInUser = user else {
                self.login(command: command)
                return
            }

            let userData = self.getUserData(from: loggedInUser)
            let pluginResult = CDVPluginResult(status: CDVCommandStatus_OK, messageAs: userData)
            self.commandDelegate.send(pluginResult, callbackId: command.callbackId)
        }
    }

    @objc(login:)
    func login(command: CDVInvokedUrlCommand) {

          if let clientId = self.commandDelegate.settings["GID_CLIENT_ID".lowercased()] as? String {
            signInInstance?.configuration = GIDConfiguration(clientID: clientId)
            guard let viewController = self.viewController else {
                let pluginResult = self.createPluginResult(status: .error, message: "ViewController is not available.")
                self.commandDelegate.send(pluginResult, callbackId: command.callbackId)
                return
            }

            signInInstance?.signIn(withPresenting: viewController) { result, error in
                if let error = error {
                    let pluginResult = self.createPluginResult(status: .error, message: error.localizedDescription)
                    self.commandDelegate.send(pluginResult, callbackId: command.callbackId)
                    return
                }

                guard let safeUser = result?.user else {
                    let pluginResult = self.createPluginResult(status: .error, message: "User data is not available.")
                    self.commandDelegate.send(pluginResult, callbackId: command.callbackId)
                    return
                }

                let pluginResult = CDVPluginResult(status: .ok, messageAs: self.getUserData(from: safeUser))
                self.commandDelegate.send(pluginResult, callbackId: command.callbackId)
            }
        }
    }

    @objc(signOut:)
    func signOut(command: CDVInvokedUrlCommand) {
        signInInstance?.signOut()
        let pluginResult = CDVPluginResult(status: CDVCommandStatus_OK)
        self.commandDelegate.send(pluginResult, callbackId: command.callbackId)
    }

    private func createPluginResult(status: CDVCommandStatus, message: String) -> CDVPluginResult {
        return CDVPluginResult(
            status: status,
            messageAs: message
        )
    }

    private func getUserData(from user: GIDGoogleUser) -> [String: Any] {
        return [
            "idToken": user.idToken?.tokenString ?? ""
        ]
    }
}
